/*
    <PL/SQL>
        오라클 자체에 내장되어 있는 절차적 언어로 SQL 문장 내에서 변수의 정의, 조건 처리(IF), 반복 처리(LOOP, FOR, WHILE) 등을 지원한다.
        (다수의 SQL 문을 순서대로 실행 할 수 있다)
        
        [PL/SQL의 구조]
            1) 선언부(DECLAER SECTION)
                DECLARE로 시작, 변수나 상수를 선언 및 초기화하는 부분이다.
                생략가능
            2) 실행부(EXECUTABLE SECTION) 
                BEGIN로 시작, SQL 문, 제어문(조건, 반복문) 등의 로직을 기술하는 부분이다.
            3) 예외 처리부(EXCEPTION SECTION) 
                EXCEPTION로 시작, 예외 발생 시 해결하기 위한 구문을 기술하는 부분이다.
                생략가능
*/


-- 프로시저를 사용하여 출력하는 내용을 화면에 보여줄 수 있도록 설정

SET SERVEROUTPUT ON;
-- SET SERVEROUTPUT OFF; -- 출력기능 끄기
-- 실행부 (선언부와 예외처리부는 생략이 가능)
-- 하나의 블록이다
-- 선언부
DECLARE
    -- 변수명 변수타입
    vi_num NUMBER;
BEGIN
--초기화 하지 않은 경우 NULL값이 할당된다
-- 환경설정을 해주지 않으면 출력되지 않는다
-- SET SERVEROUTPUT ON;
-- 프로시저를 사용하여 출력하는 내용을 화면에 보여주도록 설정하는 환경변수
-- vi_num := 100;
DBMS_OUTPUT.PUT_LINE(VI_NUM);
DBMS_OUTPUT.PUT_LINE('VI_NUM: '||VI_NUM);
DBMS_OUTPUT.PUT_LINE('안녕하세요');
END;
--하나의  PQ/SQL 문장의 끝을 나타낸다
-- 한페이지에 여러개의 PL/SQL 문장이 있는 경우 /를 이용해서 구분
/

DECLARE
-- CONSTANT: 상수는 선언과 동시에 초기화
pi CONSTANT NUMBER := 3.14; 
BEGIN
-- 상수는 값을 변경할 수 없습니다
pi := 2.14;
DBMS_OUTPUT.PUT_LINE('pi: '||pi);
END;
/

/*
변수선언: radius=5, pi(상수)=3.14
변수도 선언과 동시에 초기화 가능
*/
DECLARE
    -- 선언과 동시에 초기화 가능
    radius number := 5;
    -- 선언과 동시에 초기화 하지 않으면 오류 발생
    pi constant number := 3.14;
begin
    radius:= 10; --값 변경 가능
    dbms_output.put_line('원의 둘레: '||pi*radius*2);
end;
/

/*
eid, ename을 변수로 선언하고 초기화 하여 아래와 같이 출력해봅시다
eid: 999 ename: 나예리
*/
declare
    eid number := 999;
    ename varchar2(20) := '나예리';
    
begin

    select emp_id, emp_name -- +)emp_no -> 갯수가 다른 경우 오류 발생
    into eid, ename -- 조회 결과를 변수에 담아줍니다. 컬럼의 갯수 타입에 맞게 변수를 설정
    from emp
    -- 파라미터를 입력 받는 방법
    -- 다수의 행이 반환 된 경우 오류 발생
    where emp_id =& 사번; -- =&: 사용자로부터 입력받은 값으로 대체
  
    dbms_output.put_line('eid: '||eid);
    dbms_output.put_line('ename: '||ename);
end;
/


-- sql문을 이용해서 조회된 결과를 변수에 담아 봅시다
select emp_id, emp_name
from emp
where emp_id = 200;

/*
1. 파라미터로 입력 받는 방법
사번에 대한 데이터값 입력 창이 뜨고, 사용자로부터 입력 받은 값으로 변경 해줌
where emp_id =& 사번

2. select문의 조회 결과를 변수에 담는 방법
select emp_id, emp_name
into eid, enmae <- 조회되는 컬럼의 갯수와 타입을 일치 시켜줌
*/

declare
    eid emp.emp_id%type;
    ename emp.emp_NAME%type;
    
begin
    select emp_id, emp_name
    into eid, ename 
    from emp
    where emp_id =&사번; 
  
    dbms_output.put_line('eid: '||eid);
    dbms_output.put_line('ename: '||ename);
end;
/

/*
< PL/SQL 선언부(DECLAER SECTION) >
- 변수 및 상수를 선언해 놓는 공간
- 선언과 동시에 초기화도 가능
    
< 변수 및 상수의 타입 >
1) 일반 타입 변수 
- SQL 타입 (NUMBER, CHAR, VARCHAR2, DATE 등)
2) 레퍼런스 타입 변수 
- PL/SQL 타입 (테이블의 컬럼타입을 참조)
3) ROW 타입 변수
- PL/SQL 타입 (하나의 테이블의 모든 컴럼의 값을 한꺼번에 저장할 수 있는 변수)
*/


/*
1) 일반 타입 변수의 선언 및 초기화
[표현법]
변수명 [CONSTANT] 자료형(크기) [:= 값];
자료형 : NUMBER, CHAR, VARCHAR2 등 SQL
*/
DECLARE
    radius number := 5;
    pi constant number := 3.14;
begin
    radius:= 10;
    dbms_output.put_line('원의 둘레: '||pi*radius*2);
end;
/
/*
2) 레퍼런스 타입 변수 선언 및 초기화
[표현법]
변수명 테이블명.컬럼명%TYPE;
            
- 변수의 타입을 지정하는데
테이블의 컬럼의 데이터 타입을 참조 하여 지정
*/
-- 문제) 사원명을 입력받아서 사원의 사번, 사원명, 급여정보, 직급명 각각 eid, ename, sal 변수에 대입 후 출럴한다
DECLARE
    EID EMP.EMP_ID%TYPE;
    ENAME EMP.EMP_NAME%TYPE;
    SAL VARCHAR2(20);
    J_NAME JOB.JOB_NAME%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, TO_CHAR(SALARY,'9,999,999'), JOB_NAME
    INTO EID, ENAME, SAL, J_NAME
    FROM EMP
    JOIN JOB USING(JOB_CODE)
    WHERE EMP_NAME ='& 사원명'; -- 문자타입인 경우 홑따옴표 ' ' 로 감싸준다
    
    DBMS_OUTPUT.PUT_LINE('EID: '||EID);
    DBMS_OUTPUT.PUT_LINE('ENAME: '||ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL: '||SAL);
    DBMS_OUTPUT.PUT_LINE('J_NAME: '||J_NAME);
END;
/

/*
3) ROW 타입 변수 선언 및 초기화
[표현법]
변수명 테이블명%ROWTYPE;
                
- 하나의 테이블의 여러 컴럼의 값을 한꺼번에 저장할 수 있는 변수를 의미한다.
- 모든 컬럼을 조회하는 경우에 사용하기 편리하다.
             
* ERROR : 테이블이름과 같은 변수명은 오류를 발생
*/
DECLARE 
    e EMP%ROWTYPE;
BEGIN 
    SELECT * 
    INTO e
    FROM EMP
    WHERE EMP_ID='200';
    
    DBMS_OUTPUT.PUT_LINE('사번: '||e.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('사번: '||e.EMP_NAME);
END;
/

-- 학생 백업 테이블 생성 (테이블 구조만 복사)
CREATE TABLE TB_STUDENT_BK
AS SELECT * FROM TB_STUDENT WHERE 1=2;
/*
    실습
    변수선언
        student_info : TB_STUDENT테이블의 모든 컬럼정보를 담고 있습니다
        
    1. 학번이 A213046인 학생의 정보를 조회하여 변수에 담기
    2. 학생의 정보를 TB_STUDENT_BK테이블에 입력
*/
DECLARE
    student_info TB_STUDENT%ROWTYPE;
BEGIN
    SELECT *
    INTO student_info
    FROM TB_STUDENT
    WHERE STUDENT_NO = 'A213046';
    
    INSERT INTO TB_STUDENT_BK VALUES student_info;
    DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT||'건 처리되었습니다');
    
END;
/
SELECT * FROM TB_STUDENT_BK;